{"version":3,"sources":["App/App.module.scss","App/Display/canvas.js","App/shepardTone.js","App/notes.js","App/Display/Display.js","App/Keypad/Keypad.js","App/TouchPad/TouchPad.js","App/App.js","reportWebVitals.js","index.js","App/Keypad/Keypad.module.scss"],"names":["module","exports","rotate","angle","x","y","ctx","func","cos","Math","sin","dx","dy","call","Canvas","element","document","createElement","width","offsetWidth","height","offsetHeight","devicePixelRatio","window","resize","isMounted","_element","parentNode","_width","_height","_devicePixelRatio","_imageDataHandler","_context","scale","arc","radius","startAngle","endAngle","PI","anticlockwise","beginPath","bezierCurveTo","clearRect","clip","closePath","drawImage","source","sx","sy","sWidth","sHeight","dWidth","dHeight","isCanvas","_drawImageDest","fill","fillRect","lineTo","moveTo","quadraticCurveTo","rect","stroke","resetTransform","restore","transform","save","setRotate","setTransform","xScale","xSkew","ySkew","yScale","setTranslate","translate","createImageData","imageDataOrWidth","this","getContext","str","fillStyle","globalCompositeOperation","num","globalAlpha","lineWidth","strokeStyle","points","lastPoint","nextPoint","path","Path2D","length","i","avgX","avgY","CURRENT_NOTES","AUDIO_CONTEXTS","initializeContext","index","gainNode","START_FREQ","pow","audioCtx","AudioContext","webkitAudioContext","createGain","err","console","log","multiplier","oscillators","connect","destination","gain","value","freq","oscillator","createOscillator","frequency","start","suspend","toggleNote","note","isPlaying","resume","stopNote","NOTES","CHROMATIC_NOTES","map","label","play","toggleShepardTone","bind","pause","FIFTH_NOTES","push","colors","Display","props","state","_rootNode","React","createRef","current","_root","_buffer","undefined","_background","_drawBackground","prevProps","prevState","isChromatic","activeNotes","_drawHitStates","_connectNotes","className","classnames","styles","root","ref","color","fillSlice","center","slice","canvas","beginRad","beginCos","beginSin","j","endRad","endCos","endSin","Component","rad","closingRad","Keypad","notes","button","small","style","left","top","onTouchStart","onTouchEnd","TouchPad","callback","rootNode","useRef","anyTouch","evt","targetTouches","getBoundingClientRect","circ","directions","clientX","clientY","atan2","direction","round","onTouchMove","onTouchCancel","App","useState","setChromatic","hasInitializedSound","setHasInitializedSound","setActiveNotes","onClick","initializaAudioContexts","toggle","type","checked","onChange","holder","holdee","touchPad","indexOf","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.af25cf05.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__nWMuC\",\"holder\":\"App_holder__33-ly\",\"holdee\":\"App_holdee__1nrU0\",\"touchPad\":\"App_touchPad__LkGTv\",\"label\":\"App_label__1QbUI\",\"toggle\":\"App_toggle__IuLcT\"};","// import ImageDataHandler from './image-data-handler';\n\nfunction rotate(angle, x, y, ctx, func) {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  const dx = x - cos * x - sin * -y;\n  const dy = y - sin * x - cos * y;\n  func.call(ctx, cos, sin, -sin, cos, dx, dy);\n}\n\n/**\n* a helper for canvas manipulation, to store a reference to the element as well as it's context.\nalso adds some helpful method defaults. also has some drawing utilities.\n* @param {HTMLCanvasElement} [element = document.createElement('canvas')] - put HTMLCanvasElement if this is your\n* final render canvas\n* @param {Integer} [width = element.offsetWidth] - width of area\n* @param {Integer} [height = element.offsetHeight] - height of area\n* @param {Float} [devicePixelRatio = window.devicePixelRatio] - actual pixels to css pixel\n*/\nexport default class Canvas {\n  /* *******************\n  * initializing methods\n  *********************/\n\n  constructor(element = document.createElement('canvas'), width = element.offsetWidth, height = element.offsetHeight, devicePixelRatio = window.devicePixelRatio) { // eslint-disable-line max-len\n    this._element = element;\n    this._context = this._element.getContext('2d');\n    this.resize(width, height, devicePixelRatio);\n  }\n\n  /**\n    * sets width/height properties as well as scaling\n    * @param {Integer} [width = this.width] - width of area of canvas\n    * @param {Integer} [height = this.height] - height of area of canvas\n    * @param {Float} [devicePixelRatio = window.devicePixelRatio] - actual pixels to css pixel\n    * @returns {void}\n  */\n  // eslint-disable complexity\n  resize = (width, height, devicePixelRatio = window.devicePixelRatio) => {\n    // allow for case to call with no params when devicePixelRatio is changed\n    // allow for case to call with no params when dom element is resized\n    // otherwise width and height are defined\n    // this method will erase the canvas and reset any clipping, fillStyle, lineWidth, strokeStyle, etc...\n    if (!width || !height) {\n      const isMounted = !!this._element.parentNode;\n      width = isMounted ? this._element.offsetWidth : this._width;\n      height = isMounted ? this._element.offsetHeight : this._height;\n    }\n    this._devicePixelRatio = devicePixelRatio;\n    this._width = width;\n    this._height = height;\n    this._element.width = width * this._devicePixelRatio;\n    this._element.height = height * this._devicePixelRatio;\n    this._imageDataHandler = null;\n    this._context.scale(this._devicePixelRatio, this._devicePixelRatio);\n  }\n  // eslint-enable complexity\n\n  /* ******\n  * getters\n  ********/\n\n  /**\n    * get the instance's HTMLCanvasElement\n    * @readonly\n    * @type {HTMLCanvasElement}\n  */\n  get element() {\n    return this._element;\n  }\n\n  /**\n    * get the instance's height\n    * @readonly\n    * @type {Integer}\n  */\n  get height() {\n    return this._height;\n  }\n\n  /**\n    * get the instance's ImageDataHandler reflecting the current state\n    * @readonly\n    * @type {ImageDataHandler}\n  */\n  get imageDataHandler() {\n    if (!this._imageDataHandler) {\n      const width = this._width * this._devicePixelRatio;\n      const height = this._height * this._devicePixelRatio;\n      // this._imageDataHandler = new ImageDataHandler(this._context, 0, 0, width, height);\n    }\n    return this._imageDataHandler;\n  }\n\n  /**\n    * get the instance's width\n    * @readonly\n    * @type {Integer}\n  */\n  get width() {\n    return this._width;\n  }\n\n  /* ******\n  * setters\n  ********/\n\n  /**\n    * set the fill color of the context.\n    * @param {String} str - new value for fillStyle\n    * @type {String}\n  */\n  set fillStyle(str) {\n    this._context.fillStyle = str;\n  }\n\n  /**\n    * set the globalCompositeOperation of the context.\n    * @param {String} str - new value for globalCompositeOperation\n    * @type {String}\n  */\n  set globalCompositeOperation(str) {\n    this._context.globalCompositeOperation = str;\n  }\n\n  /**\n    * set the alpha the context.\n    * @param {Float} num - new value for globalAlpha\n    * @type {Float}\n  */\n  set globalAlpha(num) {\n    this._context.globalAlpha = num;\n  }\n\n  /**\n    * set the stroke width of the context.\n    * @param {Float} num - new value for lineWidth\n    * @type {Float}\n  */\n  set lineWidth(num) {\n    this._context.lineWidth = num;\n  }\n\n  /**\n    * sets the stroke color of the context.\n    * @param {String} str - new value for strokeStyle\n    * @type {String}\n  */\n  set strokeStyle(str) {\n    this._context.strokeStyle = str;\n  }\n\n  /* **************\n  * drawing methods\n  ****************/\n\n  /**\n    * draws an arc on the context\n    * @param {Float} x - center point's x position\n    * @param {Float} y - center point's y position\n    * @param {Float} radius - arc's radius\n    * @param {Float} [startAngle = 0] - angle to begin arc\n    * @param {Float} [endAngle = Math.PI * 2] - angle to end arc\n    * @param {Boolean} [anticlockwise = false] - draws anticlockwise if true\n    * @returns {void}\n  */\n  arc = (x, y, radius, startAngle = 0, endAngle = Math.PI * 2, anticlockwise = false) => {\n    this._context.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n  }\n\n  /**\n    * begins a drawing path on the context\n    * @returns {void}\n  */\n  beginPath = () => {\n    this._context.beginPath();\n  }\n\n  /**\n    * draws an bezier curve on the context\n    * @returns {void}\n  */\n  bezierCurveTo = (...args) => {\n    this._context.bezierCurveTo(...args);\n  }\n\n  /**\n    * clears a rectangle on the context. also nulls the _imageDataHandler value if one exists.\n    * @param {Float} [x = 0] - rectangle's x position\n    * @param {Float} [y = 0] - rectangle's y position\n    * @param {Float} [width = this.width] - rectangle's width\n    * @param {Float} [height = this.height] - rectangle's height\n    * @returns {void}\n  */\n  clearRect = (x = 0, y = 0, width = this.width, height = this.height) => {\n    this._context.clearRect(x, y, width, height);\n    this._imageDataHandler = null;\n  }\n\n  /**\n    * creates a clipping path on the context for future drawing calls.\n    * @returns {void}\n  */\n  clip = (...args) => {\n    this._context.clip(...args);\n  }\n\n  /**\n    * closes a path on the context\n    * @returns {void}\n  */\n  closePath = () => {\n    this._context.closePath();\n  }\n\n  // eslint-disable valid-jsdoc\n  /**\n    * draws an Image or canvas element into the context. also nulls the _imageDataHandler value if one exists.\n    * method overloading to reflect CanvasRenderingContext2D.drawImage.\n    * @param {Canvas|Image|HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} source - where to take pixels from\n    * @param {Float} [dx = 0] - x coordinate of source's destination\n    * @param {Float} [dy = 0] - y coordinate of source's destination\n    * @param {Float} [dWidth = image.width] - width of destination\n    * @param {Float} [dHeight = image.height] - height of destination\n    * @returns {void}\n  */\n  /**\n    * draws an Image or canvas element into the context. also nulls the _imageDataHandler value if one exists.\n    * method overloading to reflect CanvasRenderingContext2D.drawImage.\n    * @param {Canvas|Image|HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} source - where to take pixels from\n    * @param {Float} sx - x coordinate of where to pull from source\n    * @param {Float} sy - y coordinate of where to pull from source\n    * @param {Float} sWidth - width of area to pull from source\n    * @param {Float} sHeight - height of area to pull from source\n    * @param {Float} dx - x coordinate of source's destination\n    * @param {Float} dy - y coordinate of source's destination\n    * @param {Float} dWidth - width of destination\n    * @param {Float} dHeight - height of destination\n    * @returns {void}\n  */\n  drawImage = (source, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) => { // eslint-disable-line max-params\n    // sx, sy, sWidth, sHeight on images do not get scaled against devicePixelRatio\n    const hasSource = typeof dx === 'number';\n    const isCanvas = source instanceof Canvas;\n    if (hasSource) {\n      if (isCanvas) {\n        sx *= this._devicePixelRatio;\n        sy *= this._devicePixelRatio;\n        sWidth *= this._devicePixelRatio;\n        sHeight *= this._devicePixelRatio;\n        this._context.drawImage(source.element, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\n      } else {\n        this._context.drawImage(source, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\n      }\n    } else if (isCanvas) {\n      sWidth = sWidth || source.width;\n      sHeight = sHeight || source.height;\n      this._drawImageDest(source.element, sx, sy, sWidth, sHeight);\n    } else {\n      this._drawImageDest(source, sx, sy, sWidth, sHeight);\n    }\n    this._imageDataHandler = null;\n  }\n  // eslint-enable valid-jsdoc\n\n  _drawImageDest = (source, dx = 0, dy = 0, dWidth = source.width, dHeight = source.height) => {\n    this._context.drawImage(source, dx, dy, dWidth, dHeight);\n  }\n\n  /**\n    * fills a path on the context. also nulls the _imageDataHandler value if one exists.\n    * @returns {void}\n  */\n  fill = (...args) => {\n    this._context.fill(...args);\n    this._imageDataHandler = null;\n  }\n\n  /**\n    * draws a filled rectangle on the context. also nulls the _imageDataHandler value if one exists.\n    * @param {Float} [x = 0] - rectangle's x position\n    * @param {Float} [y = 0] - rectangle's y position\n    * @param {Float} [width = this.width] - rectangle's width\n    * @param {Float} [height = this.height] - rectangle's height\n    * @returns {void}\n  */\n  fillRect = (x = 0, y = 0, width = this.width, height = this.height) => {\n    this._context.fillRect(x, y, width, height);\n    this._imageDataHandler = null;\n  }\n\n  /**\n    * draws a line to a point on the context.\n    * @returns {void}\n  */\n  lineTo = (...args) => {\n    this._context.lineTo(...args);\n  }\n\n  /**\n    * moves to a point on the context.\n    * @returns {void}\n  */\n  moveTo = (...args) => {\n    this._context.moveTo(...args);\n  }\n\n  /**\n    * draws a quadratic curve to a point on the context.\n    * @returns {void}\n  */\n  quadraticCurveTo = (...args) => {\n    this._context.quadraticCurveTo(...args);\n  }\n\n  /**\n    * draws a rectangle on the context.\n    * @param {Float} [x = 0] - rectangle's x position\n    * @param {Float} [y = 0] - rectangle's y position\n    * @param {Float} [width = this.width] - rectangle's width\n    * @param {Float} [height = this.height] - rectangle's height\n    * @returns {void}\n  */\n  rect = (x = 0, y = 0, width = this.width, height = this.height) => {\n    this._context.rect(x, y, width, height);\n  }\n\n  // scale: no scale method! use resize instead!\n\n  /**\n    * strokes the context's current path.\n    * @returns {void}\n  */\n  stroke = (...args) => {\n    this._context.stroke(...args);\n    this._imageDataHandler = null;\n  }\n\n  /* *********************\n  * transformation methods\n  ***********************/\n\n  /**\n    * resets all transforms on the context to zero.\n    * @returns {void}\n  */\n  resetTransform = () => {\n    this._context.resetTransform();\n    // if canvas was scaled it would otherwise be undone\n    this._context.scale(this._devicePixelRatio, this._devicePixelRatio);\n  }\n\n  /**\n    * restores context to a saved state of popped off of a stack.\n    * @returns {void}\n  */\n  restore = () => {\n    this._context.restore();\n  }\n\n  /**\n    * cumulatively rotates the context around x/y coordinates.\n    * @param {Float} angle - amount to rotate\n    * @param {Float} [x = this.width / 2] - center x position\n    * @param {Float} [y = this.height / 2] - center y position\n    * @returns {void}\n  */\n  rotate = (angle, x = 0.5 * this.width, y = 0.5 * this.height) => {\n    if (!angle) {\n      return;\n    }\n    rotate(angle, x, y, this._context, this._context.transform);\n  }\n\n  /**\n    * pushes a saved state of the curent context onto a stack.\n    * @returns {void}\n  */\n  save = () => {\n    this._context.save();\n  }\n\n  /**\n    * resets the context's rotation to a new amount around x/y coordinates.\n    * @param {Float} angle - amount to rotate\n    * @param {Float} [x = this.width / 2] - center x position\n    * @param {Float} [y = this.height / 2] - center y position\n    * @returns {void}\n  */\n  setRotate = (angle, x = 0.5 * this.width, y = 0.5 * this.height) => {\n    rotate(angle, x, y, this._context, this.setTransform);\n  }\n\n  /**\n    * resets the context's transform to new values.\n    * @param {Float} xScale - horizontal scale\n    * @param {Float} xSkew - horizontal skew\n    * @param {Float} ySkew - verical skew\n    * @param {Float} yScale - vertical movement\n    * @param {Float} dx - horizontal movement\n    * @param {Float} dy - vertical movement\n    * @returns {void}\n  */\n  setTransform = (xScale, xSkew, ySkew, yScale, dx, dy) => {\n    xScale *= this._devicePixelRatio;\n    xSkew *= this._devicePixelRatio;\n    ySkew *= this._devicePixelRatio;\n    yScale *= this._devicePixelRatio;\n    dx *= this._devicePixelRatio;\n    dy *= this._devicePixelRatio;\n    this._context.setTransform(xScale, xSkew, ySkew, yScale, dx, dy);\n  }\n\n  /**\n    * sets the context's grid to coordinates.\n    * @param {Float} dx - horizontal movement\n    * @param {Float} dy - vertical movement\n    * @returns {void}\n  */\n  setTranslate = (dx, dy) => {\n    this.setTransform(1, 0, 0, 1, dx, dy);\n  }\n\n  /**\n    * cumulatively moves the context's grid by coordinates.\n    * @param {Float} dx - horizontal movement\n    * @param {Float} dy - vertical movement\n    * @returns {void}\n  */\n  translate = (dx, dy) => {\n    this._context.translate(dx, dy);\n  }\n\n  /* ***********\n  * misc methods\n  *************/\n\n  // eslint-disable valid-jsdoc\n  /**\n    * creates a blank ImageData based on provided width/height.\n    * method overloading to reflect CanvasRenderingContext2D.createImageData.\n    * @param {Number} width - a width amount\n    * @param {Number} height - a height amount\n    * @returns {void}\n  */\n  /**\n    * creates a blank ImageData based on a provided ImageData's dimensions.\n    * method overloading to reflect CanvasRenderingContext2D.createImageData.\n    * @param {ImageData} imageData - an existing ImageData instance\n    * @returns {void}\n  */\n  // eslint-enable valid-jsdoc\n  createImageData = (imageDataOrWidth, height) => {\n    return this._context.createImageData(imageDataOrWidth, height);\n  }\n\n  /* *************\n  * static methods\n  ***************/\n\n  /**\n    * returns Path2D of a path approximately through an array of points.\n    * @param {Array} points - array of points\n    * @param {Path2D} [path = new Path2D()] - Path2D instance to add instructions to\n    * @returns {void}\n  */\n  static quadraticThrough(points, path = new Path2D()) {\n    const { length } = points;\n    let lastPoint;\n    let nextPoint;\n    for (let i = 0; i < length - 1; i++) {\n      lastPoint = nextPoint || points[0];\n      nextPoint = points[i + 1];\n      if (i === 0) {\n        path.moveTo(lastPoint.x, lastPoint.y);\n      } else if (i < length - 2) {\n        const avgX = (lastPoint.x + nextPoint.x) / 2;\n        const avgY = (lastPoint.y + nextPoint.y) / 2;\n        path.quadraticCurveTo(lastPoint.x, lastPoint.y, avgX, avgY);\n      } else {\n        path.quadraticCurveTo(lastPoint.x, lastPoint.y, nextPoint.x, nextPoint.y);\n      }\n    }\n    return path;\n  }\n}\n","const A = 440;\nconst MIN_FREQ = 20;\nconst MAX_FREQ = 20000;\n\nconst CURRENT_NOTES = [];\nconst AUDIO_CONTEXTS = [];\n\nfunction initializeContext(index) {\n  const START_FREQ = A / Math.pow(2, 4);\n  const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n  let gainNode;\n  try {\n    gainNode = audioCtx.createGain();\n  } catch(err) {\n    console.log('ERROR: shepardTone.initializeContext gainNode = audioCtx.createGain()');\n    console.log(err);\n    console.log({index, audioCtx});\n  }\n  const steps_per_loop = 12;\n  const multiplier = Math.pow(2, 1 / steps_per_loop);\n  const oscillators = [];\n\n  gainNode.connect(audioCtx.destination);\n  gainNode.gain.value = 100 / 100 / 12;\n\n  for(let i = START_FREQ; i <= MAX_FREQ; i *= 2) {\n    const freq = i * Math.pow(multiplier, index);\n    if (freq < MIN_FREQ) {\n      continue;\n    } else if (freq > MAX_FREQ) {\n      break;\n    }\n    const oscillator = audioCtx.createOscillator();\n    oscillator.frequency.value = freq;\n    oscillator.connect(gainNode);\n    oscillator.start(0);\n    oscillators[i] = oscillator;\n  }\n  try {\n    audioCtx.suspend();\n  } catch(err) {\n    console.log('ERROR: shepardTone.initializeContext audioCtx.suspend()');\n    console.log(err);\n    console.log({index, audioCtx, gainNode})\n  }\n  AUDIO_CONTEXTS[index] = audioCtx;\n}\n\nfunction startNote(index) {\n  CURRENT_NOTES[index] = true;\n  if (!AUDIO_CONTEXTS[index]) {\n    initializeContext(index);\n  } else {\n    AUDIO_CONTEXTS[index].resume();\n  }\n}\n\nfunction stopNote(index) {\n\n  try {\n    AUDIO_CONTEXTS[index].suspend();\n  } catch(err) {\n    console.log('ERROR: shepardTone.stopNote AUDIO_CONTEXTS[index].suspend()');\n    console.log(err);\n    console.log({index, \"AUDIO_CONTEXTS[index]\":AUDIO_CONTEXTS[index]});\n  }\n  CURRENT_NOTES[index] = false;\n}\n\nexport default function toggleNote(note, isPlaying) {\n  if (isPlaying && !CURRENT_NOTES[note]) {\n    startNote(note);\n  } else if (!isPlaying && CURRENT_NOTES[note]) {\n    stopNote(note);\n  }\n}\n\nexport function initializaAudioContexts() {\n  for (let i = 0; i < 12; i++) {\n    initializeContext(i);\n  }\n}\n","import toggleShepardTone from './shepardTone';\n\nconst NOTES = ['A','A#/Bb','B','C','C#/Db','D','D#/Eb','E','F','F#/Gb','G','G#/Ab'];\n\nexport const CHROMATIC_NOTES = NOTES.map(function(note, i) {\n  return {\n    label: note,\n    index: i,\n    play: toggleShepardTone.bind(null, i, true),\n    pause: toggleShepardTone.bind(null, i, false),\n  }\n});\n\nexport const FIFTH_NOTES = [];\nwhile(FIFTH_NOTES.length < NOTES.length) {\n  FIFTH_NOTES.push(CHROMATIC_NOTES[\n    ((FIFTH_NOTES.length * 7) + 6) \n    % NOTES.length])\n}\n","import styles from './Display.module.scss';\nimport classnames from 'classnames';\nimport React from 'react';\nimport Canvas from './canvas';\nimport {FIFTH_NOTES} from '../notes';\n\nconst colors = ['#f00', '#f80', '#ff0', '#8f0', '#0f0', '#0f8', '#0ff', '#08f', '#00f', '#80f', '#f0f', '#f08'];\n\nexport default class Display extends React.Component {\n  state={}\n\n  constructor(props) {\n    super(props);\n    this._rootNode = React.createRef();\n  }\n\n  componentDidMount() {\n    const {current} = this._rootNode;\n    const {offsetWidth, offsetHeight} = current;\n    this._root = new Canvas(current);\n    this._root.globalCompositeOperation = 'copy';\n    this._buffer = new Canvas(undefined, offsetWidth, offsetHeight);\n    this._background = new Canvas(undefined, offsetWidth, offsetHeight);\n\n\n    this._drawBackground();\n    this._root.drawImage(this._background);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.isChromatic !== this.props.isChromatic) {\n      this._drawBackground();\n      this._root.drawImage(this._background);\n    }\n    if (prevProps.activeNotes !== this.props.activeNotes) {\n      this._buffer.clearRect();\n      this._buffer.drawImage(this._background);\n      // this._buffer.globalCompositeOperation = 'hue';\n      // this._buffer.globalCompositeOperation = 'multiply';\n      // this._buffer.globalCompositeOperation = 'screen';\n      // this._buffer.globalCompositeOperation = 'overlay';\n      // this._buffer.globalCompositeOperation = 'darken';\n      // this._buffer.globalCompositeOperation = 'lighten';\n      // this._buffer.globalCompositeOperation = 'color-dodge';\n      // this._buffer.globalCompositeOperation = 'color-burn';\n      // this._buffer.globalCompositeOperation = 'luminosity';\n      this._drawHitStates();\n      this._connectNotes();\n      // this._buffer.globalCompositeOperation = 'source-over';\n      this._root.drawImage(this._buffer);\n    }\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  render() {\n    const {className} = this.props;\n    return <canvas className={classnames(styles.root, className)} ref={this._rootNode} />;\n  }\n\n  _drawBackground() {\n    const {isChromatic} = this.props;\n    for (let i = 0; i < colors.length; i++) {\n      const color = isChromatic ? colors[i] : colors[(FIFTH_NOTES[i].index + 6) % 12];\n      fillSlice(this._background, color, i);\n    }\n  }\n\n  _drawHitStates() {\n    for (const note of this.props.activeNotes) {\n      fillSlice(this._buffer, `rgba(0,0,0,0.2)`, note);\n    }\n  }\n\n  _connectNotes() {\n    const {activeNotes} = this.props;\n    const center = this._buffer.width / 2;\n    const slice = Math.PI * 2 / 12;\n    const canvas = this._buffer;\n    for (let i = 0; i < activeNotes.length; i++) {\n      const beginRad = slice * (activeNotes[i] + 9);\n      const beginCos = Math.cos(beginRad);\n      const beginSin = Math.sin(beginRad);\n      for (let j = i; j < activeNotes.length; j++) {\n        const endRad = slice * (activeNotes[j] + 9);\n        const endCos = Math.cos(endRad);\n        const endSin = Math.sin(endRad);\n        canvas.beginPath();\n        canvas.moveTo(center + beginCos * center, center + beginSin * center)\n        canvas.lineTo(center + endCos * center, center + endSin * center);\n        canvas.stroke();\n      }\n    }\n  }\n}\n\nfunction fillSlice(canvas, color, index) {\n  const center = canvas.width / 2;\n  const slice = Math.PI * 2 / 12;\n\n  canvas.beginPath();\n  canvas.fillStyle = color;\n  canvas.moveTo(center, center);\n\n  const rad = slice * (index - 3.5);\n  const cos = Math.cos(rad);\n  const sin = Math.sin(rad);\n  canvas.lineTo(center + cos * center, center + sin * center);\n\n  const closingRad = rad + slice;\n  canvas.arc(center, center, center, rad, closingRad);\n  canvas.fill();\n}\n","import styles from './Keypad.module.scss';\nimport classnames from 'classnames';\n\nexport default function Keypad({className, notes}) {\n  return (\n    <div className={classnames(styles.root, className)}>\n      {notes.map(function(note, i) {\n        const rad = Math.PI * 2 / notes.length * (i - 6);\n        const x = Math.cos(rad);\n        const y = Math.sin(rad)\n        return <button\n          className={classnames(styles.button, note.label.length > 1 && styles.small)}\n          key={note.label}\n          style={{\n            left: `${(x * 35 + 50)}%`,\n            top: `${(y * 35 + 50)}%`,\n          }}\n          onTouchStart={note.play}\n          onTouchEnd={note.pause}\n        >{note.label}</button>\n      })}\n    </div>\n  );\n}\n","import {useRef} from 'react';\nimport {round} from '@danehansen/math';\n\nexport default function TouchPad({className, callback}) {\n  const rootNode = useRef(null);\n\n  function onTouchMove(evt) {\n    // console.log('onTouchMove');\n    anyTouch(evt);\n  }\n\n  function onTouchStart(evt) {\n    // console.log('onTouchStart');\n    anyTouch(evt);\n  }\n\n  function onTouchEnd(evt) {\n    const {targetTouches} = evt;\n    // console.log('onTouchEnd', targetTouches[0]);\n    anyTouch(evt);\n  }\n\n  function onTouchCancel(evt) {\n    // console.log('onTouchCancel');\n    anyTouch(evt);\n  }\n\n  function anyTouch(evt) {\n    const {targetTouches} = evt;\n    if (!targetTouches) {\n      callback([]);\n    }\n    const rect = rootNode.current.getBoundingClientRect();\n\n    const circ = Math.PI * 2;\n    const directions = []\n    for (let i = 0; i < targetTouches.length; i++) {\n      const {clientX, clientY} = targetTouches[i];\n      const x = clientX - rect.x - rect.width * 0.5;\n      const y = clientY - rect.y - rect.height * 0.5;\n      const rad = (Math.atan2(-y, x) + circ) % circ;\n      const rounded = Math.round(round(rad, circ / 12) / circ * 12) % 12;\n      const direction = (12 * 2 - (rounded + 9)) % 12;\n      // console.log('anyTouch', direction);\n      directions.push(direction);\n    }\n    // console.log('anyTouch', directions);\n    callback(directions);\n  }\n\n  return <div\n    ref={rootNode}\n    className={className}\n    onTouchMove={onTouchMove}\n    onTouchStart={onTouchStart}\n    onTouchEnd={onTouchEnd}\n    onTouchCancel={onTouchCancel}\n  />;\n}\n","import styles from './App.module.scss';\nimport Display from './Display/Display';\nimport Keypad from './Keypad/Keypad';\nimport TouchPad from './TouchPad/TouchPad';\nimport {CHROMATIC_NOTES, FIFTH_NOTES} from './notes';\nimport {useState} from 'react';\nimport {initializaAudioContexts} from './shepardTone';\n\nexport default function App() {\n  let [isChromatic, setChromatic] = useState(true);\n  let [hasInitializedSound, setHasInitializedSound] = useState(false);\n  let [activeNotes, setActiveNotes] = useState([]);\n\n  function onChange(evt) {\n    setChromatic(!isChromatic);\n  }\n\n  function onClick(evt) {\n    initializaAudioContexts();\n    setHasInitializedSound(true);\n  }\n\n  function onTouchCallback(directions) {\n    for(const note of CHROMATIC_NOTES) {\n      const index = (note.index + 3) % 12;\n      // const index = note.index;\n      if (directions.indexOf(note.index) >= 0) {\n        isChromatic ? CHROMATIC_NOTES[index].play() : FIFTH_NOTES[index].play()\n      } else {\n        isChromatic ? CHROMATIC_NOTES[index].pause() : FIFTH_NOTES[index].pause()\n      }\n    }\n    setActiveNotes(directions);\n  }\n\n  return (\n    <div className={styles.root} onClick={hasInitializedSound ? null : onClick}>\n      <label className={styles.label}>\n        {isChromatic ? 'CHROMATIC' : 'CIRCLE OF FIFTHS'}\n        <input className={styles.toggle} type=\"checkbox\" checked={isChromatic} onChange={onChange} />\n      </label>\n      <div className={styles.holder}>\n        <div className={styles.holdee}>\n          <Display activeNotes={activeNotes} className={styles.touchPad} isChromatic={isChromatic} />\n          <Keypad className={styles.touchPad} notes={isChromatic ? CHROMATIC_NOTES : FIFTH_NOTES} />\n          <TouchPad callback={onTouchCallback} className={styles.touchPad}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/reset.module.scss';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Keypad_root__2ThFc\",\"button\":\"Keypad_button__1d0eI\",\"small\":\"Keypad_small__32bQ1\"};"],"sourceRoot":""}